撤销操作 
g commit --amend

这个命令会将暂存区中的文件提交 


远程操作
g remote 

_ -v 查看远程地址
_ add <shortname> <url>  关联远程仓库 <别名> <地址>
_ show [remote-name] 查看远程仓库信息


远程拉取
g fetch [remote-name] 
如果你有一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支
*** git pull  === git fetch + git merge 拉取合并

推送远程 合并
g push [remote-name] [branch-name]
-f 强制推送


删除远程分支
g remote rm [remote-name]
g push origin :[remote-name]


分支

创建分支
g breach [branch-name]


切换分支
g checkout [branch-name]


删除分支 
g branch -d [branch-name]


跟踪分支 远程分支检出本地分支
g checkout -b [branch-name] [remotename]/[branch-name]

**快速检出同名分支
g checkout --track [remotename]/[breach]

*设置已有的分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支
g branch -u [remotename]/[breach]


查看设置的所有跟踪分支
g branch -vv



之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。

其实，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。

它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。（译注：写明了 commit id，以便理解，下同）

git reset 
撤销提交 
--soft [commitid] commit前状态
--mixed [commitid] add前状态
--hard [commitid] 修改前状态

git revet
还原提交